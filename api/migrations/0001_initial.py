# Generated by Django 4.0.2 on 2022-04-15 03:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True)),
                ('sales', models.IntegerField(default=0, verbose_name='Sales Amount')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CardModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='name', max_length=100, unique=True, verbose_name='Name')),
                ('attribute', models.CharField(blank=True, max_length=20, null=True, verbose_name='Attribute')),
                ('race', models.CharField(default='race', max_length=20, verbose_name='Class')),
                ('level', models.IntegerField(blank=True, null=True, verbose_name='Level/Rank/Link')),
                ('attack', models.IntegerField(blank=True, null=True, verbose_name='ATK')),
                ('defense', models.IntegerField(blank=True, null=True, verbose_name='DEF')),
                ('description', models.TextField(default='desc', verbose_name='Effect/Description')),
                ('type', models.CharField(default='type', max_length=100, verbose_name='Type')),
                ('image_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('state_province', models.CharField(max_length=100, verbose_name='State/Province')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('street', models.CharField(max_length=100, verbose_name='Street')),
                ('zip_code', models.CharField(max_length=10, verbose_name='Zip Code')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CardOnSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Price')),
                ('set', models.CharField(default='XXXX-000', max_length=20, verbose_name='Set')),
                ('rarity', models.CharField(default='rare', max_length=40, verbose_name='Rarity')),
                ('amount', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Amount')),
                ('region', models.CharField(choices=[('PT_BR', 'Brazilian Portuguese'), ('EN_US', 'English'), ('FR', 'French'), ('IT', 'Italian'), ('DE', 'German'), ('ES', 'Spanish'), ('JP', 'Japanese'), ('KR', 'Korean'), ('CN', 'Chinese'), ('EN_OCG', 'English (Asian)')], max_length=20, verbose_name='Region')),
                ('condition', models.CharField(choices=[('NM', 'Near Mint'), ('LP', 'Lightly Played'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('DMG', 'Damaged')], max_length=20, verbose_name='Condition')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible?')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.cardmodel', verbose_name='Card name')),
                ('seller', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Seller ID')),
            ],
        ),
    ]
